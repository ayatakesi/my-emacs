Androidインストール手順

Androidデバイスで実行可能なEmacsをビルドするなら全部読もう

ソースからビルドする場合にはトップにあるINSTALL.REPOも読もう



Android実行中のコンピューターではバイナリプログラム生成不可な変わったOSがAndroid。別のコンピューターで適切なバージョンの``Android SDK'' (Software Development Kit)、``Android NDK'' (Native Development Kit.)を使ってビルドしなければならない。ビルドしたバイナリはほとんどすべてのAndroidデバイスで動くはず。でも自由ソフトウェアのためにもDebian提供のAndroid SDKを使うべき。

SDKとNDK以外にもOpenJDK 1.7.0のjavaコンパイラー、`m4'マクロプロセッサーが必要。GNUシステムはすべて公式サポート、Mac OSも動作するらしいし他のUnixシステムも同様だが、MS WindowsとCygwinは駄目ぽい。

全部揃ったら`configure'スクリプトを呼び出そう:

  ./configure --with-android=/path/to/android.jar \
	      ANDROID_CC=/path/to/android/ndk/cc  \
	      SDK_BUILD_TOOLS=/path/to/sdk/build/tools

/path/toの部分は以下のように置き換える:

  - Android SDK同梱の`android.jar'のパス。Android 13(API level 33)でなければならない。

  - ビルドしたEmacsを実行するCPUに応じたAndroid NDKのCコンパイラーのパス。

  - Android SDKの`aapt'、`apksigner'、`d8'等のバイナリがあるディレクトリーのパス。アプリケーションパッケージのビルドに使う。

CPUは`armeabi'、`armv7*'、`i686'、`x86_64'、`mips'、`mips64'のいずれか。

configureが終わったら以下を実行する:

  make all

`make'が完了すれば`java'ディレクトリーに以下のようなファイルができる:

  emacs-<version>-<api-version>-<abi>.apk

<api-version>はそのパッケージが実行可能なAndroidの最低バージョン、<abi>はそのパッケージが対象にするAndroid機種タイプ。

できたパッケージはSD等にアップロードしてデバイスにインストールできる。


必要ファイルの準備

以上のようにAndroid向けEmacsのビルドにはSDKとNDKから3つの個別なコンポーネントが必要。これらをインストールするとAndroid開発ツールは複数ディレクトリーに配置される。Emacsコンパイル関連は:

  platforms
  ndk
  build-tools

platformディレクトリーにはAPIレベルごとにサブディレクトリーがありヘッダーがインストールされてる。各ディレクトリにはAndroid当該バージョンのandroid.jarアーカイブがあり、これもEmacsのコンパイルに必要。

Emacsのコンパイルは対象となるAPIレベルのヘッダーを用いることが必須。現在のAPIレベルは33なのでandroid.jarは`android-33'で始まるディレクトリーにある。ヘッダーのマイナーリビジョンは重要ではない。`android-33-extN'(NはAndroid SDKのリビジョン)と`android-33'のどちらを`configure'に指定するかは特に重要じゃない。

ndkディレクトリにはインストール済みAndroid NDKバージョンごとにC/C++コンパイルを含んだサブディレクトリが1つある。NDKバージョンは上述のandroid.jarほど重要じゃない。NDKはバージョンごとに使用できるAPIレベルが定まる。Cコンパイラーのバイナリ(または__ANDROID_API__)はパッケージが対象とするもっとも古いAndroidバージョン次第。

ほとんどのサブディレクトリには`toolchains'というフォルダがあり、そこにNDK提供のGCCツールチェーンそれぞれに応じた`llvm'ディレクトリーがある。Cコンパイラーはそのディレクトリーの`prebuilt/*/bin'にある。

build-toolsディレクトリには、Javaコンパイラが出力したクラスファイルをAndroidのDEX形式に変換するユーティリティプログラムがあるサブディレクトリががある。バージョンごとに1つサブディレクトリがあるがバージョンはさほど重要ではない。選択したバージョンが動作しなければconfigureが文句を言うので新しいバージョンをインストールする。 最新の33.0.xと34.0.x系列は多分動作する。


古いNDK バージョンでの構築

古いバージョンのAndroid NDKによるEmacsのビルドするには特別なセットアップが必要。それらのバージョンのNDK には、Androidバージョンごとに個別のCコンパイラバイナリが存在しないので。

`configure'実行前に3つの変数の指定が必要:

  - Emacsビルド対象のAndroidシステムの種類。

  - Emacsビルド対象のAndroidの最低APIバージョン。

  - システムルートの場所と、NDKの当該バージョン向けAndroidインクルードファイル。

この情報をNDK Cコンパイラへの引数として指定する。たとえば：

  ./configure [...] \
     ANDROID_CC="i686-linux-android-gcc \
		 --sysroot=/path/to/ndk/platforms/android-14/arch-x86/"
     ANDROID_CFLAGS="-isystem /path/to/ndk/sysroot/usr/include \
		     -isystem /path/to/ndk/sysroot/usr/include/i686-linux-android \
		     -D__ANDROID_API__=14"

__ANDROID_API__と"platforms/android-14"のバージョン識別子は、ビルド対象のAndroidのバージョンと関連するAndroidヘッダーへのパスを指定。Android NDKのバグにより"-gdwarf-2"の指定が必要かもしれない。

Android SDKのバージョンが古くても`-isystem'ディレクティブの追加は不要。

EmacsはAndroid 2.2(API バージョン8)以降、NDK r10b以降で動作することが判ってる。もっと古いAndroidのバージョンでも動作させたかったものの、Cコードからテキストを表示するのに必要なJNIグラフィックライブラリの欠落により断念。

Android 2.2システムには非常に厄介なバグによって生成されたEmacsパッケージをAndroid 2.2用のビルドで圧縮できない。そのため新しいバージョンのAndroidの圧縮パッケージよりも約100MB大きくなる。


C++依存関係の構築

新しいバージョンのNDKでは構成を追加せずそのままC++コードの依存関係を構築できる。古いバージョンではC++ヘッダーを見つけるためにNDK付属の``make_standalone_toolchain.py''を使って``standalone toolchain''を作成して使用する必要がある。

詳細はhttps://developer.android.com/ndk/guides/standalone_toolchainを参照のこと。``standalone toolchain''を指定するとconfigureは指定されたCコンパイラにもとづきC++コンパイラの場所を判断する。自動検出が機能しない場合は自分でC++コンパイラを指定できる:

  ./configure --with-ndk-cxx=/path/to/toolchain/bin/i686-linux-android-g++

(機械翻訳)NDKの一部のバージョンにはスタンドアロンツールチェーンにコピー後、GCCが``stddef.h''を見つけられないというバグがある。この問題(通常C++コードのビルド時に発生)を回避するには、ANDROID_CFLAGSに以下を追加する:

   -isystem /path/to/toolchain/include/c++/4.9.x


デバッグビルドとリリースビルド
DEBUG AND RELEASE BUILDS

Androidではアプリの``debug''ビルドと``release''ビルドを区別する。``release''ビルドでは、アプリに強力な最適化が適用されるが、etc/DEBUGの手順でアプリをデバッグできなくなる。

デフォルトではデバッグ可能なパッケージとしてビルドするが:

      ./configure --without-android-debug

のようにすればリリースビルドを作成する。リソースが厳しいマシンでEmacsを実行する場合には役に立つかもしれない。

再配布用のEmacsパッケージをビルドする場合には、デバッグ版とリリース版の両方を提供することをお勧めする。


共有ユーザーIDを用いたビルド

別プログラムから実行可能ファイルやアプリデータにアクセスできるEmacsをビルドしたい場合があるかもしれない。その別プログラムに``共有ユーザーID(shared user ID)''があり、かつEmacsと同じキー(通常は`emacs.keystore')で署名されていなければならない。

署名キーと``共有ユーザーID''が入手できたらconfigureに:

    ./configure --with-shared-user-id=MY.SHARED.USER.ID

たとえば

    ./configure --with-shared-user-id=com.termux

とすればTermux(https://termux.dev)というアプリのデータある`/data/data/com.termux/files'にアクセス可能なEmacsが得られる。

インストール済みアプリのユーザーID変更はシステムが許可していないので、別の共有ユーザーIDのEmacsがインストール済みの場合には行わないこと。


サードパーティライブラリとのビルド

Android NDKはサードパーティ製ライブラリを見つける通常の方法、特に`pkg-config'を使用した方法をサポートせず、`ndk-build'という独自システムを使用する。例外の1つzlibについてはAndroid OS自体の一部とみなされており、Androidを実行するデバイスですべてで利用可能。

Androidでは特定ライブラリの存在をシステムが保証しないのでアプリそれぞれに独自に依存関係を含める必要もある。

Emacsは`ndk-build'システムではなく、AutoconfとMakeでビルドされる。

ただし類似したMakeベースの`ndk-build'システムによる依存関係のビルドとインクルードはサポートされてる。

`ndk-build'を通じてビルドされる依存関係を使用するには、`Android.mk`ファイルを検索するディレクトリのリストを指定する必要がある:

  ./configure "--with-ndk-path=directory1 directory2"

(機械翻訳)
「configure」が「libc++_shared.so」が見つからないというメッセージを表示した場合は、NDK のコピー内でそのファイルを見つけて、次のように指定する必要があります。
If `configure' complains about not being able to find ``libc++_shared.so'', then you must locate that file in your copy of the NDK, and specify it like so:

  ./configure --with-ndk-cxx-shared=/path/to/sysroot/libc++_shared.so

すると各ディレクトリーの``Android.mk''ファイルを読み込み、モジュールを自動的にビルドして使用する。

Intelシステム用のビルドでは、Emacsをビルドするシステム上にNetwide Assembler(通常は``nasm''配下)がインストール済みであることを要求する``ndk-build''モジュールがある。

Google, Inc.は`ndk-build'システムを使用するようにEmacsの一般的な依存関係の多くを適合させている。すべて網羅している訳ではないが、以下は動作確認されてるもの、パッチを当てれば動作するものの一覧:

  libpng	- https://android.googlesource.com/platform/external/libpng
  libwebp	- https://android.googlesource.com/platform/external/webp
     (armv7の場合はこのファイルの最後にあるパッチの適用が必要)

  giflib	- https://android.googlesource.com/platform/external/giflib
     (Android.mkの$(BUILD_STATIC_LIBRARY)のinclude前に、LOCAL_EXPORT_CFLAGS := -I$(LOCAL_PATH) の追加が必要)

  libjpeg-turbo - https://android.googlesource.com/platform/external/libjpeg-turbo
     (Android.mkの$(BUILD_SHARED_LIBRARY)のinclude前に、LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)の追加が必要)

  libxml2	- https://android.googlesource.com/platform/external/libxml2/
     (``--with-ndk-path''にicu4cの依存関係、更にこのファイルの最後にあるパッチの適用が必要)

  icu4c		- https://android.googlesource.com/platform/external/icu/
     (このファイルの最後にあるパッチの適用が必要)

  sqlite3	- https://android.googlesource.com/platform/external/sqlite/
     (このファイルの最後にあるパッチの適用、``--with-ndk-path''に`dist'ディレクトリを追加)

  libselinux	- https://android.googlesource.com/platform/external/libselinux
     (このファイルの最後にあるパッチの適用、以下の3つの依存関係の取得が必要)

  libpackagelistparser
    https://android.googlesource.com/platform/system/core/+/refs/heads/nougat-mr1-dev/libpackagelistparser/
  libpcre	- https://android.googlesource.com/platform/external/pcre
  libcrypto	- https://android.googlesource.com/platform/external/boringssl
     (ARMの場合はこのファイルの最後にあるパッチの適用が必要)

これら依存関係の多くはAndroid自体のビルドに現在使用されている``Android.bp''ビルドシステムに移行されているが、古いブランチには``Android.mk''の旧Makefileがまだあるので新しいバージョンに簡単に適応できる。

さらにEmacs依存関係自体が`ndk-build'のサポートを提供するものがある:

  libjansson	- https://github.com/akheron/jansson
    (Android.mkの$(BUILD_SHARED_LIBRARY)のinclude前にLOCAL_EXPORT_INCLUDES := $(LOCAL_C_INCLUDES)を追加、android/jansson_config.hをandroid/jansson_private_config.hにコピーする必要がある)

Emacs開発者はARMに移植した依存関係は以下の通り:

  gnutls, gmp	- https://sourceforge.net/projects/android-ports-for-gnu-emacs
    (このファイルの最後の方にあるGNUTLSセクションを参照のこと)

  libtiff    	- https://sourceforge.net/projects/android-ports-for-gnu-emacs
    (解凍して``--with-ndk-path''にtiff-4.5.0-emacs.tar.gzを指定)

  tree-sitter	- https://sourceforge.net/projects/android-ports-for-gnu-emacs
    (このファイルの最後の方にあるTREE-SITTERセクションを参照のこと)

  harfbuzz  	- https://sourceforge.net/projects/android-ports-for-gnu-emacs
    (このファイルの最後の方にあるHARFBUZZセクションを参照のこと)

他の開発者がAndroidに移植した依存関係は:

  ImageMagick, lcms2 - https://github.com/MolotovCherry/Android-ImageMagick7
    (このファイルの最後の方にあるIMAGEMAGICKセクションを参照のこと)

ndk-buildをエミュレートするEmacsビルドシステムはごく初期の段階にあり、テストされていない重要な依存関係をEmacsで機能させるにはほとんどが調整を要すると思われる。


GNUTLS

GnuTLSと依存関係(libgmp、libtasn1、p11-kit等)の修正版コピーはhttps://sourceforge.net/projects/android-ports-for-gnu-emacsで入手可能。

Android 5.0以降のarm64システム、Android 13以降のarmv7lシステムでのみテスト済みなので他の種類のマシン用にEmacsをビルドする場合には状況が異なるかもしれない。

GnuTLSとともにEmacsをビルドするには、上記サイトの以下のtarアーカイブ:

  gmp-6.2.1-emacs.tgz
  gnutls-3.7.8-emacs.tar.gz
  libtasn1-4.19.0-emacs.tar.gz
  p11-kit-0.24.1-emacs.tar.gz
  nettle-3.8-emacs.tar.gz

を解凍して解凍したフォルダを``--with-ndk-path''に追加する必要がある。これらのパッケージ内部にある`configure'やMakefileで個別にビルドしないように注意。


TREE-SITTER

ndk-buildシステムでビルドするよう変更済みのTree-sitterのコピーも上記URLで入手可能。Tree-sitterとともにEmacsをビルドするには以下のtarアーカイブ:

  tree-sitter-0.20.7-emacs.tar.gz

を解凍して解凍したフォルダを``--with-ndk-build''に追加する。


HARFBUZZ

ndk-buildシステムでビルドするよう変更済みのHarfBuzzのコピーも上記URLで入手可能。HarfBuzzとともにEmacsをビルドするには以下のtarアーカイブ:

  harfbuzz-7.1.0-emacs.tar.gz

を解凍して解凍したフォルダを``--with-ndk-build''に追加する。


IMAGEMAGICK

Android向けImageMagickのサードパーティ製ポートがあるが、残念ながらこのポートはパッチを適用した独自のバージョンのlibpng、libjpeg、libtiff、libwebpを使っており、これらはEmacsで使用するものと競合する。MakefileもMS Windows用に作成されているので、このファイルの最後にあるパッチも適用する必要がある。


LIBXML2用のパッチ

Emacs用にビルドする前にGoogle バージョンのlibxml2の Android.mkにこのパッチ適用する必要がある。さらに、コミット`edb5870767fed8712a9b77ef34097209b61ab2db'のrevertも必要。

diff --git a/Android.mk b/Android.mk
index 07c7b372..24f67e49 100644
--- a/Android.mk
+++ b/Android.mk
@@ -80,6 +80,7 @@ LOCAL_SHARED_LIBRARIES := libicuuc
 LOCAL_MODULE:= libxml2
 LOCAL_CLANG := true
 LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
+LOCAL_EXPORT_C_INCLUDES += $(LOCAL_PATH)
 include $(BUILD_SHARED_LIBRARY)

 # For the host
@@ -94,3 +95,5 @@ LOCAL_MODULE := libxml2
 LOCAL_CLANG := true
 LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
 include $(BUILD_HOST_STATIC_LIBRARY)
+
+$(call import-module,libicuuc)

ICU用のパッチ

Emacs用にビルドする前にGoogleバージョンのicuのicu4j/Android.mkにこのパッチ適用する必要がある。

diff --git a/icu4j/Android.mk b/icu4j/Android.mk
index d1ab3d5..69eff81 100644
--- a/icu4j/Android.mk
+++ b/icu4j/Android.mk
@@ -69,7 +69,7 @@ include $(BUILD_STATIC_JAVA_LIBRARY)
 # Path to the ICU4C data files in the Android device file system:
 icu4c_data := /system/usr/icu
 icu4j_config_root := $(LOCAL_PATH)/main/classes/core/src
-include external/icu/icu4j/adjust_icudt_path.mk
+include $(LOCAL_PATH)/adjust_icudt_path.mk

 include $(CLEAR_VARS)
 LOCAL_SRC_FILES := $(icu4j_src_files)

diff --git a/icu4c/source/common/Android.mk b/icu4c/source/common/Android.mk
index 8e5f757..44bb130 100644
--- a/icu4c/source/common/Android.mk
+++ b/icu4c/source/common/Android.mk
@@ -231,7 +231,7 @@ include $(CLEAR_VARS)
 LOCAL_SRC_FILES += $(src_files)
 LOCAL_C_INCLUDES += $(c_includes) $(optional_android_logging_includes)
 LOCAL_CFLAGS += $(local_cflags) -DPIC -fPIC
-LOCAL_SHARED_LIBRARIES += libdl $(optional_android_logging_libraries)
+LOCAL_SHARED_LIBRARIES += libdl libstdc++ $(optional_android_logging_libraries)
 LOCAL_MODULE_TAGS := optional
 LOCAL_MODULE := libicuuc
 LOCAL_RTTI_FLAG := -frtti

SQLITE3用のパッチ

diff --git a/dist/Android.mk b/dist/Android.mk
index bf277d2..36734d9 100644
--- a/dist/Android.mk
+++ b/dist/Android.mk
@@ -141,6 +141,7 @@ include $(BUILD_HOST_EXECUTABLE)
 include $(CLEAR_VARS)
 LOCAL_SRC_FILES := $(common_src_files)
 LOCAL_CFLAGS += $(minimal_sqlite_flags)
+LOCAL_EXPORT_C_INCLUDES += $(LOCAL_PATH)
 LOCAL_MODULE:= libsqlite_static_minimal
 LOCAL_SDK_VERSION := 23
 include $(BUILD_STATIC_LIBRARY)

diff --git a/dist/sqlite3.c b/dist/sqlite3.c
index b0536a4..8fa1ee9 100644
--- a/dist/sqlite3.c
+++ b/dist/sqlite3.c
@@ -26474,7 +26474,7 @@ SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){
 */
 #if !defined(HAVE_POSIX_FALLOCATE) \
       && (_XOPEN_SOURCE >= 600 || _POSIX_C_SOURCE >= 200112L)
-# define HAVE_POSIX_FALLOCATE 1
+/* # define HAVE_POSIX_FALLOCATE 1 */
 #endif

 /*

WEBP用のパッチ

diff --git a/Android.mk b/Android.mk
index c7bcb0f5..d4da1704 100644
--- a/Android.mk
+++ b/Android.mk
@@ -28,9 +28,10 @@ ifneq ($(findstring armeabi-v7a, $(TARGET_ARCH_ABI)),)
   # Setting LOCAL_ARM_NEON will enable -mfpu=neon which may cause illegal
   # instructions to be generated for armv7a code. Instead target the neon code
   # specifically.
-  NEON := c.neon
-  USE_CPUFEATURES := yes
-  WEBP_CFLAGS += -DHAVE_CPU_FEATURES_H
+  # NEON := c.neon
+  # USE_CPUFEATURES := yes
+  # WEBP_CFLAGS += -DHAVE_CPU_FEATURES_H
+  NEON := c
 else
   NEON := c
 endif

SELINUX用のパッチ

diff --git a/Android.mk b/Android.mk
index 659232e..1e64fd6 100644
--- a/Android.mk
+++ b/Android.mk
@@ -116,3 +116,7 @@ LOCAL_STATIC_LIBRARIES := libselinux
 LOCAL_WHOLE_STATIC_LIBRARIES := libpcre
 LOCAL_C_INCLUDES := external/pcre
 include $(BUILD_HOST_EXECUTABLE)
+
+$(call import-module,libpcre)
+$(call import-module,libpackagelistparser)
+$(call import-module,libcrypto)

diff --git a/src/android.c b/src/android.c
index 5206a9f..b351ffc 100644
--- a/src/android.c
+++ b/src/android.c
@@ -21,8 +21,7 @@
 #include <selinux/label.h>
 #include <selinux/avc.h>
 #include <openssl/sha.h>
-#include <private/android_filesystem_config.h>
-#include <log/log.h>
+#include <android/log.h>
 #include "policy.h"
 #include "callbacks.h"
 #include "selinux_internal.h"
@@ -686,6 +685,7 @@ static int seapp_context_lookup(enum seapp_kind kind,
 		seinfo = parsedseinfo;
 	}

+#if 0
 	userid = uid / AID_USER;
 	isOwner = (userid == 0);
 	appid = uid % AID_USER;
@@ -702,9 +702,13 @@ static int seapp_context_lookup(enum seapp_kind kind,
 		username = "_app";
 		appid -= AID_APP;
 	} else {
+#endif
 		username = "_isolated";
+		appid = 0;
+#if 0
 		appid -= AID_ISOLATED_START;
 	}
+#endif

 	if (appid >= CAT_MAPPING_MAX_ID || userid >= CAT_MAPPING_MAX_ID)
 		goto err;
@@ -1662,8 +1666,10 @@ int selinux_log_callback(int type, const char *fmt, ...)

     va_start(ap, fmt);
     if (vasprintf(&strp, fmt, ap) != -1) {
+#if 0
         LOG_PRI(priority, "SELinux", "%s", strp);
         LOG_EVENT_STRING(AUDITD_LOG_TAG, strp);
+#endif
         free(strp);
     }
     va_end(ap);

BORINGSSL用のパッチ

diff --git a/Android.mk b/Android.mk
index 3e3ef2a..277d4a9 100644
--- a/Android.mk
+++ b/Android.mk
@@ -27,7 +27,9 @@ LOCAL_MODULE := libcrypto
 LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/src/include
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk $(LOCAL_PATH)/crypto-sources.mk
 LOCAL_CFLAGS += -fvisibility=hidden -DBORINGSSL_SHARED_LIBRARY -DBORINGSSL_IMPLEMENTATION -DOPENSSL_SMALL -Wno-unused-parameter
+LOCAL_CFLAGS_arm = -DOPENSSL_STATIC_ARMCAP -DOPENSSL_NO_ASM
 LOCAL_SDK_VERSION := 9
+LOCAL_LDFLAGS = --no-undefined
 # sha256-armv4.S does not compile with clang.
 LOCAL_CLANG_ASFLAGS_arm += -no-integrated-as
 LOCAL_CLANG_ASFLAGS_arm64 += -march=armv8-a+crypto
diff --git a/sources.mk b/sources.mk
index e82f3d5..be3a3c4 100644
--- a/sources.mk
+++ b/sources.mk
@@ -337,20 +337,20 @@ linux_aarch64_sources := \
   linux-aarch64/crypto/sha/sha256-armv8.S\
   linux-aarch64/crypto/sha/sha512-armv8.S\

-linux_arm_sources := \
-  linux-arm/crypto/aes/aes-armv4.S\
-  linux-arm/crypto/aes/aesv8-armx32.S\
-  linux-arm/crypto/aes/bsaes-armv7.S\
-  linux-arm/crypto/bn/armv4-mont.S\
-  linux-arm/crypto/modes/ghash-armv4.S\
-  linux-arm/crypto/modes/ghashv8-armx32.S\
-  linux-arm/crypto/sha/sha1-armv4-large.S\
-  linux-arm/crypto/sha/sha256-armv4.S\
-  linux-arm/crypto/sha/sha512-armv4.S\
-  src/crypto/chacha/chacha_vec_arm.S\
-  src/crypto/cpu-arm-asm.S\
-  src/crypto/curve25519/asm/x25519-asm-arm.S\
-  src/crypto/poly1305/poly1305_arm_asm.S\
+# linux_arm_sources := \
+#   linux-arm/crypto/aes/aes-armv4.S\
+#   linux-arm/crypto/aes/aesv8-armx32.S\
+#   linux-arm/crypto/aes/bsaes-armv7.S\
+#   linux-arm/crypto/bn/armv4-mont.S\
+#   linux-arm/crypto/modes/ghash-armv4.S\
+#   linux-arm/crypto/modes/ghashv8-armx32.S\
+#   linux-arm/crypto/sha/sha1-armv4-large.S\
+#   linux-arm/crypto/sha/sha256-armv4.S\
+#   linux-arm/crypto/sha/sha512-armv4.S\
+#   src/crypto/chacha/chacha_vec_arm.S\
+#   src/crypto/cpu-arm-asm.S\
+#   src/crypto/curve25519/asm/x25519-asm-arm.S\
+#   src/crypto/poly1305/poly1305_arm_asm.S\

 linux_x86_sources := \
   linux-x86/crypto/aes/aes-586.S\

IMAGEMAGICK用のパッチ

diff --git a/Android.mk b/Android.mk
index 5ab6699..4441417 100644
--- a/Android.mk
+++ b/Android.mk
@@ -52,6 +52,20 @@ LZMA_LIB_PATH                   := $(LOCAL_PATH)/xz-5.2.4
 BZLIB_LIB_PATH                  := $(LOCAL_PATH)/bzip-1.0.8
 LCMS_LIB_PATH                   := $(LOCAL_PATH)/liblcms2-2.9

+LIBBZ2_ENABLED        := true
+LIBFFTW_ENABLED       := true
+LIBFREETYPE2_ENABLED  := true
+LIBJPEG_TURBO_ENABLED := true
+LIBLZMA_ENABLED       := true
+LIBOPENJPEG_ENABLED   := true
+LIBPNG_ENABLED        := true
+LIBTIFF_ENABLED       := true
+LIBWEBP_ENABLED       := true
+LIBXML2_ENABLED       := true
+LIBZLIB_ENABLED       := true
+LIBLCMS2_ENABLED      := true
+BUILD_MAGICKWAND      := true
+
 #-------------------------------------------------------------
 # Include all modules
 #-------------------------------------------------------------
@@ -68,6 +82,9 @@ include $(MAKE_PATH)/libjpeg-turbo.mk
 # libopenjpeg
 include $(MAKE_PATH)/libopenjpeg.mk

+# libwebp
+include $(MAKE_PATH)/libwebp.mk
+
 # libtiff
 include $(MAKE_PATH)/libtiff.mk

@@ -77,9 +94,6 @@ include $(MAKE_PATH)/libpng.mk
 # libfreetype2
 include $(MAKE_PATH)/libfreetype2.mk

-# libwebp
-include $(MAKE_PATH)/libwebp.mk
-
 # libfftw
 include $(MAKE_PATH)/libfftw.mk

diff --git a/libjpeg-turbo-2.0.2/jconfig.h b/libjpeg-turbo-2.0.2/jconfig.h
index 47d14c9..5c6f8ee 100644
--- a/libjpeg-turbo-2.0.2/jconfig.h
+++ b/libjpeg-turbo-2.0.2/jconfig.h
@@ -1,57 +1,43 @@
-/* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS */
+/* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS */
 #ifndef JPEG_LIB_VERSION
 #define JPEG_LIB_VERSION 62
 #endif
-
 #ifndef LIBJPEG_TURBO_VERSION
 #define LIBJPEG_TURBO_VERSION 2.0.2
 #endif
-
 #ifndef LIBJPEG_TURBO_VERSION_NUMBER
 #define LIBJPEG_TURBO_VERSION_NUMBER 202
 #endif
-
 #ifndef C_ARITH_CODING_SUPPORTED
 #define C_ARITH_CODING_SUPPORTED
 #endif
-
 #ifndef D_ARITH_CODING_SUPPORTED
 #define D_ARITH_CODING_SUPPORTED
 #endif
-
 #ifndef MEM_SRCDST_SUPPORTED
 #define MEM_SRCDST_SUPPORTED
 #endif
-
 #ifndef WITH_SIMD
 #define WITH_SIMD
 #endif
-
 #ifndef BITS_IN_JSAMPLE
 #define BITS_IN_JSAMPLE 8
 #endif
-
 #ifndef HAVE_LOCALE_H
 #define HAVE_LOCALE_H
 #endif
-
 #ifndef HAVE_STDDEF_H
 #define HAVE_STDDEF_H
 #endif
-
 #ifndef HAVE_STDLIB_H
 #define HAVE_STDLIB_H
 #endif
-
 #ifndef NEED_SYS_TYPES_H
 #define NEED_SYS_TYPES_H
 #endif
-
 #ifndef HAVE_UNSIGNED_CHAR
 #define HAVE_UNSIGNED_CHAR
 #endif
-
 #ifndef HAVE_UNSIGNED_SHORT
 #define HAVE_UNSIGNED_SHORT
 #endif
-
diff --git a/libxml2-2.9.9/encoding.c b/libxml2-2.9.9/encoding.c
index a3aaf10..60f165b 100644
--- a/libxml2-2.9.9/encoding.c
+++ b/libxml2-2.9.9/encoding.c
@@ -2394,7 +2394,6 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
 {
     int ret;
     size_t written;
-    size_t writtentot = 0;
     size_t toconv;
     int c_in;
     int c_out;
@@ -2451,7 +2450,6 @@ retry:
                             xmlBufContent(in), &c_in);
     xmlBufShrink(in, c_in);
     xmlBufAddLen(out, c_out);
-    writtentot += c_out;
     if (ret == -1) {
         if (c_out > 0) {
             /* Can be a limitation of iconv or uconv */
@@ -2536,7 +2534,6 @@ retry:
 	    }

             xmlBufAddLen(out, c_out);
-            writtentot += c_out;
             goto retry;
 	}
     }
@@ -2567,9 +2564,7 @@ xmlCharEncOutFunc(xmlCharEncodingHandler *handler, xmlBufferPtr out,
                   xmlBufferPtr in) {
     int ret;
     int written;
-    int writtentot = 0;
     int toconv;
-    int output = 0;

     if (handler == NULL) return(-1);
     if (out == NULL) return(-1);
@@ -2612,7 +2607,6 @@ retry:
                             in->content, &toconv);
     xmlBufferShrink(in, toconv);
     out->use += written;
-    writtentot += written;
     out->content[out->use] = 0;
     if (ret == -1) {
         if (written > 0) {
@@ -2622,8 +2616,6 @@ retry:
         ret = -3;
     }

-    if (ret >= 0) output += ret;
-
     /*
      * Attempt to handle error cases
      */
@@ -2700,7 +2692,6 @@ retry:
 	    }

             out->use += written;
-            writtentot += written;
             out->content[out->use] = 0;
             goto retry;
 	}
diff --git a/libxml2-2.9.9/xpath.c b/libxml2-2.9.9/xpath.c
index 5e3bb9f..505ec82 100644
--- a/libxml2-2.9.9/xpath.c
+++ b/libxml2-2.9.9/xpath.c
@@ -10547,7 +10547,7 @@ xmlXPathCompFilterExpr(xmlXPathParserContextPtr ctxt) {

 static xmlChar *
 xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
-    int len = 0, l;
+    int l;
     int c;
     const xmlChar *cur;
     xmlChar *ret;
@@ -10567,7 +10567,6 @@ xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
 	    (c == '_') || (c == ':') ||
 	    (IS_COMBINING(c)) ||
 	    (IS_EXTENDER(c)))) {
-	len += l;
 	NEXTL(l);
 	c = CUR_CHAR(l);
     }
diff --git a/make/libicu4c.mk b/make/libicu4c.mk
index 21ec121..8b77865 100644
--- a/make/libicu4c.mk
+++ b/make/libicu4c.mk
@@ -250,7 +250,7 @@ LOCAL_MODULE    := libicuuc
 LOCAL_SRC_FILES := $(src_files)

 # when built in android, they require uconfig_local (because of android project), but we don't need this
-$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /* Autogenerated stub file to make libicuuc build happy */) \
+$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /\* Autogenerated stub file to make libicuuc build happy \*/) \

 ifeq ($(LIBXML2_ENABLED),true)
     include $(BUILD_STATIC_LIBRARY)
diff --git a/make/libjpeg-turbo.mk b/make/libjpeg-turbo.mk
index d39dd41..fdebcf3 100644
--- a/make/libjpeg-turbo.mk
+++ b/make/libjpeg-turbo.mk
@@ -230,30 +230,30 @@ JCONFIG_FLAGS += \
     HAVE_UNSIGNED_SHORT

 JCONFIGINT_FLAGS += \
-    BUILD="20190814" \
-    PACKAGE_NAME="libjpeg-turbo" \
-    VERSION="2.0.2"
+    BUILD=\"20190814\" \
+    PACKAGE_NAME=\"libjpeg-turbo\" \
+    VERSION=\"2.0.2\"

 # originally defined in jconfigint.h, but the substitution has problems with spaces
 LOCAL_CFLAGS := \
     -DINLINE="inline __attribute__((always_inline))"

 # create definition file jconfig.h, needed in order to build
-$(shell echo /* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS */ > $(JPEG_LIB_PATH)/jconfig.h)
+$(shell echo \/\* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS \*\/ > $(JPEG_LIB_PATH)/jconfig.h)
 $(foreach name,$(JCONFIG_FLAGS), \
     $(if $(findstring =,$(name)), \
-        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(firstword $(subst =, ,$(name)))) \
+        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(firstword $(subst =, ,$(name)))) \
     , \
-        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(name)) \
+        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(name)) \
     ) \
-    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #define $(subst =, ,$(name))) \
-    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #endif) \
+    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#define $(subst =, ,$(name))) \
+    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#endif) \
     $(shell >> $(JPEG_LIB_PATH)/jconfig.h echo.) \
 )

 # create definition file jconfigint.h, needed in order to build
-$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS */)
-$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo #define $(subst =, ,$(name))))
+$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /\* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS \*/)
+$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo \#define $(subst =, ,$(name))))

 ifeq ($(LIBJPEG_TURBO_ENABLED),true)
     include $(BUILD_STATIC_LIBRARY)
diff --git a/make/liblcms2.mk b/make/liblcms2.mk
index e1fd3b9..29ca791 100644
--- a/make/liblcms2.mk
+++ b/make/liblcms2.mk
@@ -10,6 +10,10 @@ LOCAL_C_INCLUDES := \
     $(LCMS_LIB_PATH)/include \
     $(LCMS_LIB_PATH)/src

+LOCAL_EXPORT_C_INCLUDES := \
+    $(LCMS_LIB_PATH) \
+    $(LCMS_LIB_PATH)/include \
+    $(LCMS_LIB_PATH)/src

 LOCAL_CFLAGS := \
     -DHAVE_FUNC_ATTRIBUTE_VISIBILITY=1 \
diff --git a/make/libmagick++-7.mk b/make/libmagick++-7.mk
index 5352ccb..929396d 100644
--- a/make/libmagick++-7.mk
+++ b/make/libmagick++-7.mk
@@ -12,7 +12,7 @@ LOCAL_C_INCLUDES  :=  \

 ifneq ($(STATIC_BUILD),true)
     LOCAL_LDFLAGS += -fexceptions
-    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
+    LOCAL_LDLIBS    := -llog -lz
 endif

 LOCAL_SRC_FILES := \
diff --git a/make/libmagickcore-7.mk b/make/libmagickcore-7.mk
index 81293b2..d51fced 100644
--- a/make/libmagickcore-7.mk
+++ b/make/libmagickcore-7.mk
@@ -25,6 +25,7 @@ else ifeq ($(TARGET_ARCH_ABI),x86_64)

 endif

+LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)

 LOCAL_C_INCLUDES  += \
     $(IMAGE_MAGICK) \
@@ -45,10 +46,9 @@ LOCAL_C_INCLUDES  += \
     $(BZLIB_LIB_PATH) \
     $(LCMS_LIB_PATH)/include

-
 ifneq ($(STATIC_BUILD),true)
 # ignored in static library builds
-    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
+    LOCAL_LDLIBS    := -llog -lz
 endif


diff --git a/make/libmagickwand-7.mk b/make/libmagickwand-7.mk
index 7be2fb6..0bbcca5 100644
--- a/make/libmagickwand-7.mk
+++ b/make/libmagickwand-7.mk
@@ -14,7 +14,7 @@ LOCAL_C_INCLUDES  :=  \

 # always ignored in static builds
 ifneq ($(STATIC_BUILD),true)
-    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
+    LOCAL_LDLIBS    := -llog -lz
 endif

 LOCAL_SRC_FILES := \
@@ -54,6 +54,29 @@ ifeq ($(OPENCL_BUILD),true)
     LOCAL_SHARED_LIBRARIES += libopencl
 endif

+LOCAL_SHARED_LIBRARIES += libstdc++
+
+ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
+    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
+    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
+else ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
+    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
+    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
+else ifeq ($(TARGET_ARCH_ABI),x86)
+    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
+    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
+else ifeq ($(TARGET_ARCH_ABI),x86_64)
+    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
+    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
+
+    ifneq ($(STATIC_BUILD),true)
+        LOCAL_LDFLAGS += -latomic
+    endif
+
+endif
+
+LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)
+
 ifeq ($(BUILD_MAGICKWAND),true)
     ifeq ($(STATIC_BUILD),true)
         LOCAL_STATIC_LIBRARIES := \
diff --git a/make/libpng.mk b/make/libpng.mk
index 24fb8ac..dda05fd 100644
--- a/make/libpng.mk
+++ b/make/libpng.mk
@@ -30,6 +30,7 @@ ifeq ($(TARGET_ARCH_ABI), arm64-v8a)
 endif # TARGET_ARCH_ABI == arm64-v8a


+LOCAL_EXPORT_C_INCLUDES := $(PNG_LIB_PATH)
 LOCAL_C_INCLUDES := $(PNG_LIB_PATH)

 LOCAL_SRC_FILES += \
diff --git a/make/libtiff.mk b/make/libtiff.mk
index ca43f25..2b17508 100644
--- a/make/libtiff.mk
+++ b/make/libtiff.mk
@@ -12,6 +12,9 @@ LOCAL_C_INCLUDES :=  \
     $(LZMA_LIB_PATH)/liblzma/api \
     $(WEBP_LIB_PATH)/src

+LOCAL_EXPORT_C_INCLUDES :=  \
+    $(TIFF_LIB_PATH)
+
 ifeq ($(LIBLZMA_ENABLED),true)
     LOCAL_CFLAGS += -DLZMA_SUPPORT=1
 endif
diff --git a/make/magick.mk b/make/magick.mk
index 3ba4b1d..5471608 100644
--- a/make/magick.mk
+++ b/make/magick.mk
@@ -18,7 +18,7 @@ LOCAL_C_INCLUDES  :=  \
     $(FREETYPE_LIB_PATH)/include


-LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
+LOCAL_LDLIBS    := -llog -lz
 LOCAL_SRC_FILES := \
     $(IMAGE_MAGICK)/utilities/magick.c \



This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
