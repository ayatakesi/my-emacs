# This file contains patches described in the GNU Emacs documentation,
# and may be redistributed and/or modified under the terms of the GNU
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
name: build without selinux
on:
  workflow_dispatch:
jobs:
    ##########################
    # Get webp, then upload it
  get-webp:
    runs-on: ubuntu-latest
    steps:
    - name: get webp and if armv7 patch it
      run: |
        git clone https://android.googlesource.com/platform/external/webp
        # use v1.0.3 latest(just before v1.1.0) same as imagemagick version.
        git -C webp checkout a76694a1
        patch --directory webp -p1 << 'EOS'
        diff --git a/Android.mk b/Android.mk
        index 8f0cb756..e6268645 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -183,16 +183,16 @@ ifeq ($(USE_CPUFEATURES),yes)
           LOCAL_STATIC_LIBRARIES := cpufeatures
         endif
         
        -LOCAL_MODULE := webpdecoder_static
        +LOCAL_MODULE := webpdecoder_static_webp
         
         include $(BUILD_STATIC_LIBRARY)
         
         ifeq ($(ENABLE_SHARED),1)
         include $(CLEAR_VARS)
         
        -LOCAL_WHOLE_STATIC_LIBRARIES := webpdecoder_static
        +LOCAL_WHOLE_STATIC_LIBRARIES := webpdecoder_static_webp
         
        -LOCAL_MODULE := webpdecoder
        +LOCAL_MODULE := webpdecoder_webp
         
         include $(BUILD_SHARED_LIBRARY)
         endif  # ENABLE_SHARED=1
        @@ -213,7 +213,7 @@ LOCAL_EXPORT_C_INCLUDES += $(LOCAL_PATH)/src
         # prefer arm over thumb mode for performance gains
         LOCAL_ARM_MODE := arm
         
        -LOCAL_WHOLE_STATIC_LIBRARIES := webpdecoder_static
        +LOCAL_WHOLE_STATIC_LIBRARIES := webpdecoder_static_webp
         
         LOCAL_MODULE := webp
        EOS
        tar cvfz webp.tar.gz ./webp
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: webp
        path: |
          webp.tar.gz
  ###########################
  # Get icu4c, then upload it
  get-icu4c:
    runs-on: ubuntu-latest
    steps:
    - name: get icu4c and upload it
      run: |
        wget https://android.googlesource.com/platform/external/icu/+archive/refs/heads/nougat-release.tar.gz
        mkdir icu
        tar xvfz nougat-release.tar.gz -C icu
        rm -f *gz
        patch --verbose --directory=icu -p1<<'EOS'
        diff --git a/icu4j/Android.mk b/icu4j/Android.mk
        index d1ab3d5..69eff81 100644
        --- a/icu4j/Android.mk
        +++ b/icu4j/Android.mk
        @@ -69,7 +69,7 @@ include $(BUILD_STATIC_JAVA_LIBRARY)
         # Path to the ICU4C data files in the Android device file system:
         icu4c_data := /system/usr/icu
         icu4j_config_root := $(LOCAL_PATH)/main/classes/core/src
        -include external/icu/icu4j/adjust_icudt_path.mk
        +include $(LOCAL_PATH)/adjust_icudt_path.mk
        
         include $(CLEAR_VARS)
         LOCAL_SRC_FILES := $(icu4j_src_files)
        
        diff --git a/icu4c/source/common/Android.mk b/icu4c/source/common/Android.mk
        index 8e5f757..44bb130 100644
        --- a/icu4c/source/common/Android.mk
        +++ b/icu4c/source/common/Android.mk
        @@ -231,7 +231,7 @@ include $(CLEAR_VARS)
         LOCAL_SRC_FILES += $(src_files)
         LOCAL_C_INCLUDES += $(c_includes) $(optional_android_logging_includes)
         LOCAL_CFLAGS += $(local_cflags) -DPIC -fPIC
        -LOCAL_SHARED_LIBRARIES += libdl $(optional_android_logging_libraries)
        +LOCAL_SHARED_LIBRARIES += libdl libstdc++ $(optional_android_logging_libraries)
         LOCAL_MODULE_TAGS := optional
         LOCAL_MODULE := libicuuc
         LOCAL_RTTI_FLAG := -frtti
        EOS
        tar cvfz icu.tar.gz ./icu
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: icu
        path: |
          icu.tar.gz
  ###########################
  # Get libxml2 and upload it
  get-libxml2:
    runs-on: ubuntu-latest
    steps:
    # Clone libxml2 and upload it
    - name: clone libxml2 and upload as tar.gz
      run: |
        git clone https://android.googlesource.com/platform/external/libxml2/
        git -C libxml2 checkout nougat-release
        git -C libxml2 config user.email "you@example.com"
        git -C libxml2 config user.name "Your Name"
        git -C libxml2 revert edb5870767fed8712a9b77ef34097209b61ab2db
        patch --verbose --directory libxml2 -p1<<'EOS'
        diff --git a/Android.mk b/Android.mk
        index 07c7b372..24f67e49 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -80,6 +80,7 @@ LOCAL_SHARED_LIBRARIES := libicuuc
         LOCAL_MODULE:= libxml2
         LOCAL_CLANG := true
         LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
        +LOCAL_EXPORT_C_INCLUDES += $(LOCAL_PATH)
         include $(BUILD_SHARED_LIBRARY)
         
         # For the host
        @@ -94,3 +95,5 @@ LOCAL_MODULE := libxml2
         LOCAL_CLANG := true
         LOCAL_ADDITIONAL_DEPENDENCIES += $(LOCAL_PATH)/Android.mk
         include $(BUILD_HOST_STATIC_LIBRARY)
        +
        +$(call import-module,libicuuc)
        EOS
        nl libxml2/Android.mk
        tar cvfz libxml2.tar.gz ./libxml2
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: libxml2
        path: |
          libxml2.tar.gz
  ####################################################
  # download gnutls and dependencies, then upload them
  get-gnutls-and-dependencies:
    runs-on: ubuntu-latest
    steps:
    # gnutls
    - name: get gnutls from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/gnutls-3.7.8-emacs.tar.gz
    # gmp
    - name: get gmp from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/gmp-6.2.1-emacs.tgz
    # libtasn1
    - name: get libtasn1 from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/libtasn1-4.19.0-emacs.tar.gz
    # p11-ki
    - name: get p11-kit from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/p11-kit-0.24.1-emacs.tar.gz
    # nettle
    - name: get nettle from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/nettle-3.8-emacs.tar.gz
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: gnutls and dependencies
        path: |
          gnutls-3.7.8-emacs.tar.gz
          gmp-6.2.1-emacs.tgz
          libtasn1-4.19.0-emacs.tar.gz
          p11-kit-0.24.1-emacs.tar.gz
          nettle-3.8-emacs.tar.gz
  #####################################
  # download treesitter and upload it
  get-treesiter:
    runs-on: ubuntu-latest
    steps:
    # Get treesitter
    - name: get tree-sitter from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/tree-sitter-0.20.7-emacs.tar.gz
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: treesitter
        path: |
          tree-sitter-0.20.7-emacs.tar.gz
  ###################################
  # download harfbuzz and upload it
  get-harfbuzz:
    runs-on: ubuntu-latest
    steps:
    # Get harfbuzz
    - name: get harfbuzz from Android ports for GNU Emacs
      run: |
        wget https://sourceforge.net/projects/android-ports-for-gnu-emacs/files/harfbuzz-7.1.0-emacs.tar.gz
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: harfbuzz
        path: |
          harfbuzz-7.1.0-emacs.tar.gz
  #############################
  # Get sqlite3 and upload it
  get-sqlite3:
    runs-on: ubuntu-latest
    steps:
    - name: clone sqlite3 and upload as tar.gz
      run: |
        git clone https://android.googlesource.com/platform/external/sqlite
        # commit hash had guessed by `LOCAL_SDK_VERSION := 23'
        git -C sqlite checkout f63e8d96e298783c310c08030d4c51a875dae4cd
        patch --directory=sqlite -p1 <<'EOS'
        diff --git a/dist/Android.mk b/dist/Android.mk
        index bf277d2..36734d9 100644
        --- a/dist/Android.mk
        +++ b/dist/Android.mk
        @@ -141,6 +141,7 @@ include $(BUILD_HOST_EXECUTABLE)
         include $(CLEAR_VARS)
         LOCAL_SRC_FILES := $(common_src_files)
         LOCAL_CFLAGS += $(minimal_sqlite_flags)
        +LOCAL_EXPORT_C_INCLUDES += $(LOCAL_PATH)
         LOCAL_MODULE:= libsqlite_static_minimal
         LOCAL_SDK_VERSION := 23
         include $(BUILD_STATIC_LIBRARY)
        
        diff --git a/dist/sqlite3.c b/dist/sqlite3.c
        index b0536a4..8fa1ee9 100644
        --- a/dist/sqlite3.c
        +++ b/dist/sqlite3.c
        @@ -26474,7 +26474,7 @@ SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){
         */
         #if !defined(HAVE_POSIX_FALLOCATE) \
               && (_XOPEN_SOURCE >= 600 || _POSIX_C_SOURCE >= 200112L)
        -# define HAVE_POSIX_FALLOCATE 1
        +/* # define HAVE_POSIX_FALLOCATE 1 */
         #endif
        
         /*
        EOS
        tar cvfz sqlite.tar.gz ./sqlite
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: sqlite
        path: |
          sqlite.tar.gz
  ###########################
  # Get giflib and upload it
  get-giflib:
    runs-on: ubuntu-latest
    steps:
    - name: clone giflib and upload as tar.gz
      run: |
        git clone https://android.googlesource.com/platform/external/giflib
        git -C giflib checkout nougat-release
        patch --directory=giflib -p1<<'EOS'
        diff --git a/Android.mk b/Android.mk
        index 03a9355..13a93d0 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -14,4 +14,5 @@ LOCAL_SRC_FILES := \
         LOCAL_CFLAGS += -Wno-format -Wno-sign-compare -Wno-unused-parameter -DHAVE_CONFIG_H
         LOCAL_MODULE:= libgif
        
        +LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
         include $(BUILD_STATIC_LIBRARY)
        EOS
        tar cvfz giflib.tar.gz ./giflib
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: giflib
        path: |
          giflib.tar.gz
  ##################################
  # Get jansson and upload as tar.gz
  get-jansson:
    runs-on: ubuntu-latest
    steps:
    - name: clone jansson and upload as tar.gz
      run: |
        git clone https://github.com/akheron/jansson
        patch --directory=jansson -p1  << 'EOS'
        diff --git a/Android.mk b/Android.mk
        index e3b09e7..e9c59d6 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -27,4 +27,5 @@ LOCAL_CFLAGS += -O3 -DHAVE_STDINT_H=1
         
         LOCAL_MODULE:= libjansson
         
        +LOCAL_EXPORT_INCLUDES := $(LOCAL_C_INCLUDES)
         include $(BUILD_SHARED_LIBRARY)
        diff --git a/android/jansson_private_config.h b/android/jansson_private_config.h
        new file mode 100644
        index 0000000..618a0da
        --- /dev/null
        +++ b/android/jansson_private_config.h
        @@ -0,0 +1,43 @@
        +/*
        + * Copyright (c) 2010-2016 Petri Lehtinen <petri@digip.org>
        + *
        + * Jansson is free software; you can redistribute it and/or modify
        + * it under the terms of the MIT license. See LICENSE for details.
        + *
        + *
        + * This file specifies a part of the site-specific configuration for
        + * Jansson, namely those things that affect the public API in
        + * jansson.h.
        + *
        + * The configure script copies this file to jansson_config.h and
        + * replaces @var@ substitutions by values that fit your system. If you
        + * cannot run the configure script, you can do the value substitution
        + * by hand.
        + */
        +
        +#ifndef JANSSON_CONFIG_H
        +#define JANSSON_CONFIG_H
        +
        +/* If your compiler supports the inline keyword in C, JSON_INLINE is
        +   defined to `inline', otherwise empty. In C++, the inline is always
        +   supported. */
        +#ifdef __cplusplus
        +#define JSON_INLINE inline
        +#else
        +#define JSON_INLINE inline
        +#endif
        +
        +/* If your compiler supports the `long long` type and the strtoll()
        +   library function, JSON_INTEGER_IS_LONG_LONG is defined to 1,
        +   otherwise to 0. */
        +#define JSON_INTEGER_IS_LONG_LONG 1
        +
        +/* If locale.h and localeconv() are available, define to 1,
        +   otherwise to 0. */
        +#define JSON_HAVE_LOCALECONV 0
        +
        +/* Maximum recursion depth for parsing JSON input.
        +   This limits the depth of e.g. array-within-array constructions. */
        +#define JSON_PARSER_MAX_DEPTH 2048
        +
        +#endif
        EOS
        tar cvfz jansson.tar.gz ./jansson
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: jansson
        path: |
          jansson.tar.gz
    #############################################################
    # Get libjpeg-turbo, patch it, then upload tar.gz as artifact
  get-libjpeg:
    runs-on: ubuntu-latest
    steps:
    - name: get libjpeg-turbo and patch it
      run: |
        git clone https://android.googlesource.com/platform/external/libjpeg-turbo
        git -C libjpeg-turbo checkout nougat-release
        patch --directory=libjpeg-turbo -p1<<'EOS'
        diff --git a/Android.mk b/Android.mk
        index 2801805f..ab94028e 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -75,6 +75,9 @@ ifneq (,$(TARGET_BUILD_APPS))
          LOCAL_SDK_VERSION := 17
         endif
         
        +# Added to build with GNU Emacs on Android
        +LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)
        +
         # Build as a static library.
         LOCAL_MODULE := libjpeg_static
         include $(BUILD_STATIC_LIBRARY)
        EOS
        tar cvfz libjpeg-turbo.tar.gz ./libjpeg-turbo
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: libjpeg-turbo
        path: |
          libjpeg-turbo.tar.gz
  ################################################################################
  # get ImageMagick, patch it, and then upload it
  #   it includes original ported version of libpng, libjpeg, libtiff, and libwebp
  get-imagemagick:
    runs-on: ubuntu-latest
    steps:
    - name: clone ImageMagick and upload as tar.gz
      run: |
        git clone https://github.com/MolotovCherry/Android-ImageMagick7
        git -C Android-ImageMagick7 checkout 7.1.1-14
        patch --directory=Android-ImageMagick7 -p1 <<'EOS'
        diff --git a/Android.mk b/Android.mk
        index 5ab6699..4441417 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -52,6 +52,20 @@ LZMA_LIB_PATH                   := $(LOCAL_PATH)/xz-5.2.4
         BZLIB_LIB_PATH                  := $(LOCAL_PATH)/bzip-1.0.8
         LCMS_LIB_PATH                   := $(LOCAL_PATH)/liblcms2-2.9
        
        +LIBBZ2_ENABLED        := true
        +LIBFFTW_ENABLED       := true
        +LIBFREETYPE2_ENABLED  := true
        +LIBJPEG_TURBO_ENABLED := true
        +LIBLZMA_ENABLED       := true
        +LIBOPENJPEG_ENABLED   := true
        +LIBPNG_ENABLED        := true
        +LIBTIFF_ENABLED       := true
        +LIBWEBP_ENABLED       := true
        +LIBXML2_ENABLED       := true
        +LIBZLIB_ENABLED       := true
        +LIBLCMS2_ENABLED      := true
        +BUILD_MAGICKWAND      := true
        +
         #-------------------------------------------------------------
         # Include all modules
         #-------------------------------------------------------------
        @@ -68,6 +82,9 @@ include $(MAKE_PATH)/libjpeg-turbo.mk
         # libopenjpeg
         include $(MAKE_PATH)/libopenjpeg.mk
        
        +# libwebp
        +include $(MAKE_PATH)/libwebp.mk
        +
         # libtiff
         include $(MAKE_PATH)/libtiff.mk
        
        @@ -77,9 +94,6 @@ include $(MAKE_PATH)/libpng.mk
         # libfreetype2
         include $(MAKE_PATH)/libfreetype2.mk
        
        -# libwebp
        -include $(MAKE_PATH)/libwebp.mk
        -
         # libfftw
         include $(MAKE_PATH)/libfftw.mk
        
        diff --git a/libxml2-2.9.9/encoding.c b/libxml2-2.9.9/encoding.c
        index a3aaf10..60f165b 100644
        --- a/libxml2-2.9.9/encoding.c
        +++ b/libxml2-2.9.9/encoding.c
        @@ -2394,7 +2394,6 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
         {
             int ret;
             size_t written;
        -    size_t writtentot = 0;
             size_t toconv;
             int c_in;
             int c_out;
        @@ -2451,7 +2450,6 @@ retry:
                                     xmlBufContent(in), &c_in);
             xmlBufShrink(in, c_in);
             xmlBufAddLen(out, c_out);
        -    writtentot += c_out;
             if (ret == -1) {
                 if (c_out > 0) {
                     /* Can be a limitation of iconv or uconv */
        @@ -2536,7 +2534,6 @@ retry:
         	    }
        
                     xmlBufAddLen(out, c_out);
        -            writtentot += c_out;
                     goto retry;
         	}
             }
        @@ -2567,9 +2564,7 @@ xmlCharEncOutFunc(xmlCharEncodingHandler *handler, xmlBufferPtr out,
                           xmlBufferPtr in) {
             int ret;
             int written;
        -    int writtentot = 0;
             int toconv;
        -    int output = 0;
        
             if (handler == NULL) return(-1);
             if (out == NULL) return(-1);
        @@ -2612,7 +2607,6 @@ retry:
                                     in->content, &toconv);
             xmlBufferShrink(in, toconv);
             out->use += written;
        -    writtentot += written;
             out->content[out->use] = 0;
             if (ret == -1) {
                 if (written > 0) {
        @@ -2622,8 +2616,6 @@ retry:
                 ret = -3;
             }
        
        -    if (ret >= 0) output += ret;
        -
             /*
              * Attempt to handle error cases
              */
        @@ -2700,7 +2692,6 @@ retry:
         	    }
        
                     out->use += written;
        -            writtentot += written;
                     out->content[out->use] = 0;
                     goto retry;
         	}
        diff --git a/libxml2-2.9.9/xpath.c b/libxml2-2.9.9/xpath.c
        index 5e3bb9f..505ec82 100644
        --- a/libxml2-2.9.9/xpath.c
        +++ b/libxml2-2.9.9/xpath.c
        @@ -10547,7 +10547,7 @@ xmlXPathCompFilterExpr(xmlXPathParserContextPtr ctxt) {
        
         static xmlChar *
         xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
        -    int len = 0, l;
        +    int l;
             int c;
             const xmlChar *cur;
             xmlChar *ret;
        @@ -10567,7 +10567,6 @@ xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
         	    (c == '_') || (c == ':') ||
         	    (IS_COMBINING(c)) ||
         	    (IS_EXTENDER(c)))) {
        -	len += l;
         	NEXTL(l);
         	c = CUR_CHAR(l);
             }
        diff --git a/make/libicu4c.mk b/make/libicu4c.mk
        index 21ec121..8b77865 100644
        --- a/make/libicu4c.mk
        +++ b/make/libicu4c.mk
        @@ -250,7 +250,7 @@ LOCAL_MODULE    := libicuuc
         LOCAL_SRC_FILES := $(src_files)
        
         # when built in android, they require uconfig_local (because of android project), but we don't need this
        -$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /* Autogenerated stub file to make libicuuc build happy */) \
        +$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /\* Autogenerated stub file to make libicuuc build happy \*/) \
        
         ifeq ($(LIBXML2_ENABLED),true)
             include $(BUILD_STATIC_LIBRARY)
        diff --git a/make/libjpeg-turbo.mk b/make/libjpeg-turbo.mk
        index d39dd41..fdebcf3 100644
        --- a/make/libjpeg-turbo.mk
        +++ b/make/libjpeg-turbo.mk
        @@ -230,30 +230,30 @@ JCONFIG_FLAGS += \
             HAVE_UNSIGNED_SHORT
        
         JCONFIGINT_FLAGS += \
        -    BUILD="20190814" \
        -    PACKAGE_NAME="libjpeg-turbo" \
        -    VERSION="2.0.2"
        +    BUILD=\"20190814\" \
        +    PACKAGE_NAME=\"libjpeg-turbo\" \
        +    VERSION=\"2.0.2\"
        
         # originally defined in jconfigint.h, but the substitution has problems with spaces
         LOCAL_CFLAGS := \
             -DINLINE="inline __attribute__((always_inline))"
        
         # create definition file jconfig.h, needed in order to build
        -$(shell echo /* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS */ > $(JPEG_LIB_PATH)/jconfig.h)
        +$(shell echo \/\* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS \*\/ > $(JPEG_LIB_PATH)/jconfig.h)
         $(foreach name,$(JCONFIG_FLAGS), \
             $(if $(findstring =,$(name)), \
        -        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(firstword $(subst =, ,$(name)))) \
        +        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(firstword $(subst =, ,$(name)))) \
             , \
        -        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(name)) \
        +        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(name)) \
             ) \
        -    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #define $(subst =, ,$(name))) \
        -    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #endif) \
        +    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#define $(subst =, ,$(name))) \
        +    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#endif) \
             $(shell >> $(JPEG_LIB_PATH)/jconfig.h echo.) \
         )
        
         # create definition file jconfigint.h, needed in order to build
        -$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS */)
        -$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo #define $(subst =, ,$(name))))
        +$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /\* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS \*/)
        +$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo \#define $(subst =, ,$(name))))
        
         ifeq ($(LIBJPEG_TURBO_ENABLED),true)
             include $(BUILD_STATIC_LIBRARY)
        diff --git a/make/liblcms2.mk b/make/liblcms2.mk
        index e1fd3b9..29ca791 100644
        --- a/make/liblcms2.mk
        +++ b/make/liblcms2.mk
        @@ -10,6 +10,10 @@ LOCAL_C_INCLUDES := \
             $(LCMS_LIB_PATH)/include \
             $(LCMS_LIB_PATH)/src
        
        +LOCAL_EXPORT_C_INCLUDES := \
        +    $(LCMS_LIB_PATH) \
        +    $(LCMS_LIB_PATH)/include \
        +    $(LCMS_LIB_PATH)/src
        
         LOCAL_CFLAGS := \
             -DHAVE_FUNC_ATTRIBUTE_VISIBILITY=1 \
        diff --git a/make/libmagick++-7.mk b/make/libmagick++-7.mk
        index 5352ccb..929396d 100644
        --- a/make/libmagick++-7.mk
        +++ b/make/libmagick++-7.mk
        @@ -12,7 +12,7 @@ LOCAL_C_INCLUDES  :=  \
        
         ifneq ($(STATIC_BUILD),true)
             LOCAL_LDFLAGS += -fexceptions
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
        
         LOCAL_SRC_FILES := \
        diff --git a/make/libmagickcore-7.mk b/make/libmagickcore-7.mk
        index 81293b2..d51fced 100644
        --- a/make/libmagickcore-7.mk
        +++ b/make/libmagickcore-7.mk
        @@ -25,6 +25,7 @@ else ifeq ($(TARGET_ARCH_ABI),x86_64)
        
         endif
        
        +LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)
        
         LOCAL_C_INCLUDES  += \
             $(IMAGE_MAGICK) \
        @@ -45,10 +46,9 @@ LOCAL_C_INCLUDES  += \
             $(BZLIB_LIB_PATH) \
             $(LCMS_LIB_PATH)/include
        
        -
         ifneq ($(STATIC_BUILD),true)
         # ignored in static library builds
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
        
        
        diff --git a/make/libmagickwand-7.mk b/make/libmagickwand-7.mk
        index 7be2fb6..0bbcca5 100644
        --- a/make/libmagickwand-7.mk
        +++ b/make/libmagickwand-7.mk
        @@ -14,7 +14,7 @@ LOCAL_C_INCLUDES  :=  \
        
         # always ignored in static builds
         ifneq ($(STATIC_BUILD),true)
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
        
         LOCAL_SRC_FILES := \
        @@ -54,6 +54,29 @@ ifeq ($(OPENCL_BUILD),true)
             LOCAL_SHARED_LIBRARIES += libopencl
         endif
        
        +LOCAL_SHARED_LIBRARIES += libstdc++
        +
        +ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
        +else ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
        +else ifeq ($(TARGET_ARCH_ABI),x86)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
        +else ifeq ($(TARGET_ARCH_ABI),x86_64)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
        +
        +    ifneq ($(STATIC_BUILD),true)
        +        LOCAL_LDFLAGS += -latomic
        +    endif
        +
        +endif
        +
        +LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)
        +
         ifeq ($(BUILD_MAGICKWAND),true)
             ifeq ($(STATIC_BUILD),true)
                 LOCAL_STATIC_LIBRARIES := \
        diff --git a/make/libpng.mk b/make/libpng.mk
        index 24fb8ac..dda05fd 100644
        --- a/make/libpng.mk
        +++ b/make/libpng.mk
        @@ -30,6 +30,7 @@ ifeq ($(TARGET_ARCH_ABI), arm64-v8a)
         endif # TARGET_ARCH_ABI == arm64-v8a
        
        
        +LOCAL_EXPORT_C_INCLUDES := $(PNG_LIB_PATH)
         LOCAL_C_INCLUDES := $(PNG_LIB_PATH)
        
         LOCAL_SRC_FILES += \
        diff --git a/make/libtiff.mk b/make/libtiff.mk
        index ca43f25..2b17508 100644
        --- a/make/libtiff.mk
        +++ b/make/libtiff.mk
        @@ -12,6 +12,9 @@ LOCAL_C_INCLUDES :=  \
             $(LZMA_LIB_PATH)/liblzma/api \
             $(WEBP_LIB_PATH)/src
        
        +LOCAL_EXPORT_C_INCLUDES :=  \
        +    $(TIFF_LIB_PATH)
        +
         ifeq ($(LIBLZMA_ENABLED),true)
             LOCAL_CFLAGS += -DLZMA_SUPPORT=1
         endif
        diff --git a/make/magick.mk b/make/magick.mk
        index 3ba4b1d..5471608 100644
        --- a/make/magick.mk
        +++ b/make/magick.mk
        @@ -18,7 +18,7 @@ LOCAL_C_INCLUDES  :=  \
             $(FREETYPE_LIB_PATH)/include
        
        
        -LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +LOCAL_LDLIBS    := -llog -lz
         LOCAL_SRC_FILES := \
             $(IMAGE_MAGICK)/utilities/magick.c \
        EOS
        tar cvfz Android-ImageMagick7.tar.gz ./Android-ImageMagick7
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: Android-ImageMagick7
        path: |
          Android-ImageMagick7.tar.gz
  ########################################
  # Build Emacs with all available modules
  build:
    runs-on: ubuntu-latest
    needs: [get-webp, get-libxml2, get-icu4c, get-gnutls-and-dependencies, get-treesiter, get-harfbuzz, get-sqlite3, get-giflib, get-jansson, get-libjpeg, get-imagemagick]
    strategy:
      matrix:
        api-version: [33]
        # ndk-version: [23.2.8568313, 24.0.8215888, 25.2.9519653]
        ndk-version: [25.2.9519653]
        # abi: [i686, x86_64, aarch64, armv7a, mips64, mips, arm]
        abi: [aarch64]
        # minsdk: [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
        minsdk: [26, 33]
    steps:
    #
    # Checkout source.
    - name: Checkout source
      uses: actions/checkout@v3
    #
    # make directory for sub modules
    - name: make directory for sub modules
      run: |
        mkdir my_sub_modules
    #
    # download webp
    - name: download icu
      uses: actions/download-artifact@v3
      with:
        name: webp
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz webp.tar.gz
        rm -f *gz
        cd -
    #
    # download icu4c
    - name: download icu
      uses: actions/download-artifact@v3
      with:
        name: icu
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz icu.tar.gz
        rm -f *gz
        cd -
    #
    # download libxml2
    - name: download lbxml2
      uses: actions/download-artifact@v3
      with:
        name: libxml2
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz libxml2.tar.gz
        rm -f *gz
        cd -
    #
    # download gnutls and dependencies
    - name: download gnutls and dependencies
      uses: actions/download-artifact@v3
      with:
        name: gnutls and dependencies
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz gnutls-3.7.8-emacs.tar.gz
        tar xvfz gmp-6.2.1-emacs.tgz
        tar xvfz libtasn1-4.19.0-emacs.tar.gz
        tar xvfz p11-kit-0.24.1-emacs.tar.gz
        tar xvfz nettle-3.8-emacs.tar.gz
        rm -f *gz
        cd -
    #
    # download treesitter
    - name: download treesitter
      uses: actions/download-artifact@v3
      with:
        name: treesitter
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz tree-sitter-0.20.7-emacs.tar.gz
        rm -f *gz
        cd -
    #
    # download harfbuzz
    - name: download harfbuzz
      uses: actions/download-artifact@v3
      with:
        name: harfbuzz
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz harfbuzz-7.1.0-emacs.tar.gz
        rm -f *gz
        cd -
    #
    # download sqlite
    - name: download sqlite
      uses: actions/download-artifact@v3
      with:
        name: sqlite
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz sqlite.tar.gz
        rm -f *gz
        cd -
    #
    # download giflib
    - name: download giflib
      uses: actions/download-artifact@v3
      with:
        name: giflib
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz giflib.tar.gz
        rm -f *gz
        cd -
    #
    # download jansson
    - name: download jansson
      uses: actions/download-artifact@v3
      with:
        name: jansson
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz jansson.tar.gz
        rm -f *gz
        cd -
    #
    # download libjpeg
    - name: download libjpeg
      uses: actions/download-artifact@v3
      with:
        name: libjpeg-turbo
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz libjpeg-turbo.tar.gz
        rm -f *gz
        cd -
    #
    # download Android-ImageMagick7
    - name: download Android-ImageMagick7
      uses: actions/download-artifact@v3
      with:
        name: Android-ImageMagick7
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz Android-ImageMagick7.tar.gz
        rm -f *gz
        cd -
    # Setup java/jdk.
    - name: Setup java environment
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    #
    # Setup android environment.
    - name: Setup android
      uses: android-actions/setup-android@v2
    #
    # Run autogen.sh
    - name: run autogen.sh
      run: |
        ./autogen.sh
    #
    # Run configure
    - name: run configure
      run: |
        MODULE_ROOT=$(pwd)/my_sub_modules
        sh -x ./configure \
          --with-android=$ANDROID_HOME/platforms/android-${{ matrix.api-version }}/android.jar \
          ANDROID_CC="$ANDROID_HOME/ndk/${{ matrix.ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.abi }}-linux-android${{ matrix.minsdk }}-clang" \
          ANDROID_CFLAGS="-isystem $MODULE_ROOT/jansson/src -I $MODULE_ROOT/jansson/android -isystem $MODULE_ROOT/libxml2/include -isystem $MODULE_ROOT/libjpeg-turbo" \
          SDK_BUILD_TOOLS=$ANDROID_HOME/build-tools/33.0.0 \
          "--with-ndk-path=$MODULE_ROOT/webp $MODULE_ROOT/libxml2 $MODULE_ROOT/icu $MODULE_ROOT/gmp-6.2.1 $MODULE_ROOT/gnutls-3.7.8 $MODULE_ROOT/libtasn1-4.19.0 $MODULE_ROOT/nettle-3.8 $MODULE_ROOT/p11-kit-0.24.1 $MODULE_ROOT/tree-sitter-0.20.7 $MODULE_ROOT/harfbuzz-7.1.0 $MODULE_ROOT/sqlite/dist $MODULE_ROOT/giflib $MODULE_ROOT/jansson $MODULE_ROOT/libjpeg-turbo $MODULE_ROOT/Android-ImageMagick7"  \
        --with-shared-user-id=com.termux \
        --with-gnutls=yes \
        --with-tree-sitter=yes \
        --with-harfbuzz=yes \
        --with-sqlite3=yes \
        --with-xml2=yes \
        --with-gif=yes \
        --with-json=yes \
        --with-tiff=yes \
        --with-jpeg=yes \
        --with-webp=yes \
        --with-png=yes \
        --with-imagemagick=yes 2>&1 | tee configure.out
    #
    # upload generated configure script as artifacts
    - name: upload configure and log
      uses: actions/upload-artifact@v3
      with:
        name: configure script and log
        path: |
          configure
          config.log
          configure.out
    #
    # Run make to build apk.
    - name: run make
      run: |
        make V=1
    #
    # Upload apk as artifacts.
    - name: upload apk
      uses: actions/upload-artifact@v3
      with:
        name: Emacs.apk
        path: ./java/*.apk
