# This file contains patches described in the GNU Emacs documentation,
# and may be redistributed and/or modified under the terms of the GNU
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
name: build with imagemagick
on:
  workflow_dispatch:
jobs:
  ################################################################################
  # Get ImageMagick, patch it, and then upload it.
  # It includes ported version of libpng, libjpeg, libtiff, and libwebp.
  #
  # The patch is from java/INSTALL.
  # But I removed a hunk for libjpeg-turbo-2.0.2/jconfig.h.
  # (this hunk only deletes empty lines)
  get-imagemagick:
    runs-on: ubuntu-latest
    steps:
    - name: clone ImageMagick and upload as tar.gz
      run: |
        git clone https://github.com/MolotovCherry/Android-ImageMagick7
        git -C Android-ImageMagick7 checkout 7.1.0-62
        patch --directory=Android-ImageMagick7 -p1 <<'EOS'
        diff --git a/Android.mk b/Android.mk
        index 5ab6699..4441417 100644
        --- a/Android.mk
        +++ b/Android.mk
        @@ -52,6 +52,20 @@ LZMA_LIB_PATH                   := $(LOCAL_PATH)/xz-5.2.4
         BZLIB_LIB_PATH                  := $(LOCAL_PATH)/bzip-1.0.8
         LCMS_LIB_PATH                   := $(LOCAL_PATH)/liblcms2-2.9
         
        +LIBBZ2_ENABLED        := true
        +LIBFFTW_ENABLED       := true
        +LIBFREETYPE2_ENABLED  := true
        +LIBJPEG_TURBO_ENABLED := true
        +LIBLZMA_ENABLED       := true
        +LIBOPENJPEG_ENABLED   := true
        +LIBPNG_ENABLED        := true
        +LIBTIFF_ENABLED       := true
        +LIBWEBP_ENABLED       := true
        +LIBXML2_ENABLED       := true
        +LIBZLIB_ENABLED       := true
        +LIBLCMS2_ENABLED      := true
        +BUILD_MAGICKWAND      := true
        +
         #-------------------------------------------------------------
         # Include all modules
         #-------------------------------------------------------------
        @@ -68,6 +82,9 @@ include $(MAKE_PATH)/libjpeg-turbo.mk
         # libopenjpeg
         include $(MAKE_PATH)/libopenjpeg.mk
         
        +# libwebp
        +include $(MAKE_PATH)/libwebp.mk
        +
         # libtiff
         include $(MAKE_PATH)/libtiff.mk
         
        @@ -77,9 +94,6 @@ include $(MAKE_PATH)/libpng.mk
         # libfreetype2
         include $(MAKE_PATH)/libfreetype2.mk
         
        -# libwebp
        -include $(MAKE_PATH)/libwebp.mk
        -
         # libfftw
         include $(MAKE_PATH)/libfftw.mk
         
        diff --git a/libxml2-2.9.9/encoding.c b/libxml2-2.9.9/encoding.c
        index a3aaf10..60f165b 100644
        --- a/libxml2-2.9.9/encoding.c
        +++ b/libxml2-2.9.9/encoding.c
        @@ -2394,7 +2394,6 @@ xmlCharEncOutput(xmlOutputBufferPtr output, int init)
         {
             int ret;
             size_t written;
        -    size_t writtentot = 0;
             size_t toconv;
             int c_in;
             int c_out;
        @@ -2451,7 +2450,6 @@ retry:
                                     xmlBufContent(in), &c_in);
             xmlBufShrink(in, c_in);
             xmlBufAddLen(out, c_out);
        -    writtentot += c_out;
             if (ret == -1) {
                 if (c_out > 0) {
                     /* Can be a limitation of iconv or uconv */
        @@ -2536,7 +2534,6 @@ retry:
         	    }
         
                     xmlBufAddLen(out, c_out);
        -            writtentot += c_out;
                     goto retry;
         	}
             }
        @@ -2567,9 +2564,7 @@ xmlCharEncOutFunc(xmlCharEncodingHandler *handler, xmlBufferPtr out,
                           xmlBufferPtr in) {
             int ret;
             int written;
        -    int writtentot = 0;
             int toconv;
        -    int output = 0;
         
             if (handler == NULL) return(-1);
             if (out == NULL) return(-1);
        @@ -2612,7 +2607,6 @@ retry:
                                     in->content, &toconv);
             xmlBufferShrink(in, toconv);
             out->use += written;
        -    writtentot += written;
             out->content[out->use] = 0;
             if (ret == -1) {
                 if (written > 0) {
        @@ -2622,8 +2616,6 @@ retry:
                 ret = -3;
             }
         
        -    if (ret >= 0) output += ret;
        -
             /*
              * Attempt to handle error cases
              */
        @@ -2700,7 +2692,6 @@ retry:
         	    }
         
                     out->use += written;
        -            writtentot += written;
                     out->content[out->use] = 0;
                     goto retry;
         	}
        diff --git a/libxml2-2.9.9/xpath.c b/libxml2-2.9.9/xpath.c
        index 5e3bb9f..505ec82 100644
        --- a/libxml2-2.9.9/xpath.c
        +++ b/libxml2-2.9.9/xpath.c
        @@ -10547,7 +10547,7 @@ xmlXPathCompFilterExpr(xmlXPathParserContextPtr ctxt) {
         
         static xmlChar *
         xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
        -    int len = 0, l;
        +    int l;
             int c;
             const xmlChar *cur;
             xmlChar *ret;
        @@ -10567,7 +10567,6 @@ xmlXPathScanName(xmlXPathParserContextPtr ctxt) {
         	    (c == '_') || (c == ':') ||
         	    (IS_COMBINING(c)) ||
         	    (IS_EXTENDER(c)))) {
        -	len += l;
         	NEXTL(l);
         	c = CUR_CHAR(l);
             }
        diff --git a/make/libicu4c.mk b/make/libicu4c.mk
        index 21ec121..8b77865 100644
        --- a/make/libicu4c.mk
        +++ b/make/libicu4c.mk
        @@ -250,7 +250,7 @@ LOCAL_MODULE    := libicuuc
         LOCAL_SRC_FILES := $(src_files)
         
         # when built in android, they require uconfig_local (because of android project), but we don't need this
        -$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /* Autogenerated stub file to make libicuuc build happy */) \
        +$(shell > $(ICU_COMMON_PATH)/unicode/uconfig_local.h echo /\* Autogenerated stub file to make libicuuc build happy \*/) \
         
         ifeq ($(LIBXML2_ENABLED),true)
             include $(BUILD_STATIC_LIBRARY)
        diff --git a/make/libjpeg-turbo.mk b/make/libjpeg-turbo.mk
        index d39dd41..fdebcf3 100644
        --- a/make/libjpeg-turbo.mk
        +++ b/make/libjpeg-turbo.mk
        @@ -230,30 +230,30 @@ JCONFIG_FLAGS += \
             HAVE_UNSIGNED_SHORT
         
         JCONFIGINT_FLAGS += \
        -    BUILD="20190814" \
        -    PACKAGE_NAME="libjpeg-turbo" \
        -    VERSION="2.0.2"
        +    BUILD=\"20190814\" \
        +    PACKAGE_NAME=\"libjpeg-turbo\" \
        +    VERSION=\"2.0.2\"
         
         # originally defined in jconfigint.h, but the substitution has problems with spaces
         LOCAL_CFLAGS := \
             -DINLINE="inline __attribute__((always_inline))"
         
         # create definition file jconfig.h, needed in order to build
        -$(shell echo /* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS */ > $(JPEG_LIB_PATH)/jconfig.h)
        +$(shell echo \/\* autogenerated jconfig.h based on Android.mk var JCONFIG_FLAGS \*\/ > $(JPEG_LIB_PATH)/jconfig.h)
         $(foreach name,$(JCONFIG_FLAGS), \
             $(if $(findstring =,$(name)), \
        -        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(firstword $(subst =, ,$(name)))) \
        +        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(firstword $(subst =, ,$(name)))) \
             , \
        -        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #ifndef $(name)) \
        +        $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#ifndef $(name)) \
             ) \
        -    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #define $(subst =, ,$(name))) \
        -    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo #endif) \
        +    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#define $(subst =, ,$(name))) \
        +    $(shell >>$(JPEG_LIB_PATH)/jconfig.h echo \#endif) \
             $(shell >> $(JPEG_LIB_PATH)/jconfig.h echo.) \
         )
         
         # create definition file jconfigint.h, needed in order to build
        -$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS */)
        -$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo #define $(subst =, ,$(name))))
        +$(shell >$(JPEG_LIB_PATH)/jconfigint.h echo /\* autogenerated jconfigint.h based on Android.mk vars JCONFIGINT_FLAGS \*/)
        +$(foreach name,$(JCONFIGINT_FLAGS),$(shell >>$(JPEG_LIB_PATH)/jconfigint.h echo \#define $(subst =, ,$(name))))
         
         ifeq ($(LIBJPEG_TURBO_ENABLED),true)
             include $(BUILD_STATIC_LIBRARY)
        diff --git a/make/liblcms2.mk b/make/liblcms2.mk
        index e1fd3b9..29ca791 100644
        --- a/make/liblcms2.mk
        +++ b/make/liblcms2.mk
        @@ -10,6 +10,10 @@ LOCAL_C_INCLUDES := \
             $(LCMS_LIB_PATH)/include \
             $(LCMS_LIB_PATH)/src
         
        +LOCAL_EXPORT_C_INCLUDES := \
        +    $(LCMS_LIB_PATH) \
        +    $(LCMS_LIB_PATH)/include \
        +    $(LCMS_LIB_PATH)/src
         
         LOCAL_CFLAGS := \
             -DHAVE_FUNC_ATTRIBUTE_VISIBILITY=1 \
        diff --git a/make/libmagick++-7.mk b/make/libmagick++-7.mk
        index 5352ccb..929396d 100644
        --- a/make/libmagick++-7.mk
        +++ b/make/libmagick++-7.mk
        @@ -12,7 +12,7 @@ LOCAL_C_INCLUDES  :=  \
         
         ifneq ($(STATIC_BUILD),true)
             LOCAL_LDFLAGS += -fexceptions
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
         
         LOCAL_SRC_FILES := \
        diff --git a/make/libmagickcore-7.mk b/make/libmagickcore-7.mk
        index 81293b2..d51fced 100644
        --- a/make/libmagickcore-7.mk
        +++ b/make/libmagickcore-7.mk
        @@ -25,6 +25,7 @@ else ifeq ($(TARGET_ARCH_ABI),x86_64)
             
         endif
         
        +LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)
         
         LOCAL_C_INCLUDES  += \
             $(IMAGE_MAGICK) \
        @@ -45,10 +46,9 @@ LOCAL_C_INCLUDES  += \
             $(BZLIB_LIB_PATH) \
             $(LCMS_LIB_PATH)/include
         
        -
         ifneq ($(STATIC_BUILD),true)
         # ignored in static library builds
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
         
         
        diff --git a/make/libmagickwand-7.mk b/make/libmagickwand-7.mk
        index 7be2fb6..0bbcca5 100644
        --- a/make/libmagickwand-7.mk
        +++ b/make/libmagickwand-7.mk
        @@ -14,7 +14,7 @@ LOCAL_C_INCLUDES  :=  \
         
         # always ignored in static builds
         ifneq ($(STATIC_BUILD),true)
        -    LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +    LOCAL_LDLIBS    := -llog -lz
         endif
         
         LOCAL_SRC_FILES := \
        @@ -54,6 +54,29 @@ ifeq ($(OPENCL_BUILD),true)
             LOCAL_SHARED_LIBRARIES += libopencl
         endif
         
        +LOCAL_SHARED_LIBRARIES += libstdc++
        +
        +ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm64
        +else ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)  
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/arm
        +else ifeq ($(TARGET_ARCH_ABI),x86)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86
        +else ifeq ($(TARGET_ARCH_ABI),x86_64)
        +    LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
        +    LOCAL_C_INCLUDES += $(IMAGE_MAGICK)/configs/x86-64
        +    
        +    ifneq ($(STATIC_BUILD),true)
        +        LOCAL_LDFLAGS += -latomic
        +    endif
        +    
        +endif
        +
        +LOCAL_EXPORT_C_INCLUDES += $(IMAGE_MAGICK)
        +
         ifeq ($(BUILD_MAGICKWAND),true)
             ifeq ($(STATIC_BUILD),true)
                 LOCAL_STATIC_LIBRARIES := \
        diff --git a/make/libpng.mk b/make/libpng.mk
        index 24fb8ac..dda05fd 100644
        --- a/make/libpng.mk
        +++ b/make/libpng.mk
        @@ -30,6 +30,7 @@ ifeq ($(TARGET_ARCH_ABI), arm64-v8a)
         endif # TARGET_ARCH_ABI == arm64-v8a
         
         
        +LOCAL_EXPORT_C_INCLUDES := $(PNG_LIB_PATH)
         LOCAL_C_INCLUDES := $(PNG_LIB_PATH)
         
         LOCAL_SRC_FILES += \
        diff --git a/make/libtiff.mk b/make/libtiff.mk
        index ca43f25..2b17508 100644
        --- a/make/libtiff.mk
        +++ b/make/libtiff.mk
        @@ -12,6 +12,9 @@ LOCAL_C_INCLUDES :=  \
             $(LZMA_LIB_PATH)/liblzma/api \
             $(WEBP_LIB_PATH)/src
         
        +LOCAL_EXPORT_C_INCLUDES :=  \
        +    $(TIFF_LIB_PATH)
        +
         ifeq ($(LIBLZMA_ENABLED),true)
             LOCAL_CFLAGS += -DLZMA_SUPPORT=1
         endif
        diff --git a/make/magick.mk b/make/magick.mk
        index 3ba4b1d..5471608 100644
        --- a/make/magick.mk
        +++ b/make/magick.mk
        @@ -18,7 +18,7 @@ LOCAL_C_INCLUDES  :=  \
             $(FREETYPE_LIB_PATH)/include
         
         
        -LOCAL_LDLIBS    := -L$(SYSROOT)/usr/lib -llog -lz
        +LOCAL_LDLIBS    := -llog -lz
         LOCAL_SRC_FILES := \
             $(IMAGE_MAGICK)/utilities/magick.c \
        EOS
        tar cvfz Android-ImageMagick7.tar.gz ./Android-ImageMagick7
    # upload as artifacts
    - name: upload source archives
      uses: actions/upload-artifact@v3
      with:
        name: Android-ImageMagick7
        path: |
          Android-ImageMagick7.tar.gz
  ##########################################
  # Build Emacs with imagemagick
  build-imagemagick:
    runs-on: ubuntu-latest
    needs: [get-imagemagick]
    strategy:
      matrix:
        api-version: [34]
        # sdk tool version
        tools-version: [34.0.0]
        # ndk-version: [23.2.8568313, 24.0.8215888, 25.2.9519653]
        ndk-version: [25.2.9519653]
        # abi: [i686, x86_64, aarch64, armv7a, mips64, mips, arm]
        abi: [aarch64]
        # minsdk: [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
        minsdk: [24]
    steps:
    #
    # Checkout source.
    - name: Checkout source
      uses: actions/checkout@v3
    #
    # make directory for sub modules
    - name: make directory for sub modules
      run: |
        mkdir my_sub_modules
    #
    # download Android-ImageMagick7
    - name: download Android-ImageMagick7
      uses: actions/download-artifact@v3
      with:
        name: Android-ImageMagick7
        path: my_sub_modules
    - name: expand archives
      run: |
        cd my_sub_modules
        tar xvfz Android-ImageMagick7.tar.gz
        rm -f *gz
        cd -
    # Setup java/jdk.
    - name: Setup java environment
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    #
    # Setup android environment.
    - name: Setup android
      uses: android-actions/setup-android@v2
    #
    # Run autogen.sh
    - name: run autogen.sh
      run: |
        ./autogen.sh
    #
    # Run configure
    - name: run configure
      run: |
        MODULE_ROOT=$(pwd)/my_sub_modules
        ./configure \
          --with-android=$ANDROID_HOME/platforms/android-${{ matrix.api-version }}/android.jar \
          ANDROID_CC="$ANDROID_HOME/ndk/${{ matrix.ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.abi }}-linux-android${{ matrix.minsdk }}-clang" \
          SDK_BUILD_TOOLS=$ANDROID_HOME/build-tools/${{ matrix.tools-version }} \
          "--with-ndk-path=$MODULE_ROOT/Android-ImageMagick7"  \
           --with-x-toolkit=no \
           --with-shared-user-id=com.termux \
           --with-gnutls=ifavailable \
           --with-imagemagick=yes 2>&1 | tee configure.out
    #
    # upload generated configure script as artifacts
    - name: upload configure and log
      uses: actions/upload-artifact@v3
      with:
        name: configure script and log
        path: |
          configure
          config.log
          configure.out
    #
    # Run make to build apk.
    - name: run make
      run: |
        make V=1 || echo "make failed!!!"
        for F in $(ls cross/ndk-build/*.a cross/ndk-build/*.so cross/ndk-build/*.o)
        do
          echo "ayatakesi_debug: nm $F"
          nm $F
          echo
        done
    #
    # rename apk
    - name: rename apk
      run: |
        cd java
        for APK in *.apk
        do
          mv $APK ${{ matrix.api-version }}-${{ matrix.tools-version }}-${{ matrix.ndk-version }}-${{ matrix.abi }}-${{ matrix.minsdk }}-$APK
        done
        cd -
    #
    # Upload apk as artifacts.
    - name: upload apk
      uses: actions/upload-artifact@v3
      with:
        name: Emacs-imagemagick.apk
        path: ./java/*.apk
